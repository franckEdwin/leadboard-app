from flask_migrate import Migrate
from flask import Flask, render_template
from flask import Flask, render_template, redirect, url_for
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user
from flask_login import login_required
from flask import Flask, render_template, redirect, url_for, request
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user
from flask import Flask, render_template, redirect, url_for, request
from flask_sqlalchemy import SQLAlchemy
from flask_login import current_user
from flask_login import login_user, current_user

from flask import Flask, render_template, redirect, url_for, request
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'static'  # Dossier où sont stockées les images et autres fichiers statiques
app.secret_key = 'your_secret_key_here'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///teams.db'  # Utilisation de SQLite, mais vous pouvez utiliser un autre SGBD
db = SQLAlchemy(app)
login_manager = LoginManager(app)

# Configurer Flask-Migrate
migrate = Migrate(app, db)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(user_id)



class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)  # Ajoutez un champ pour le mot de passe
    is_admin = db.Column(db.Boolean, default=False)



    def get_id(self):
        return self.username

users = {'user': {'password': 'password'}}  # Données simulées d'utilisateurs


class Team(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    points = db.Column(db.Integer, nullable=False)
    image = db.Column(db.String(200))


@app.route('/register_admin', methods=['GET', 'POST'])
def register_admin():
    if User.query.filter_by(is_admin=True).count() == 0:
        if request.method == 'POST':
            username = request.form['username']
            password = request.form['password']
            admin_user = User(username=username, password=password, is_admin=True)
            db.session.add(admin_user)
            db.session.commit()
            return redirect(url_for('login'))
        return render_template('register_admin.html')
    else:
        return "L'administrateur existe déjà."
    

@app.route('/login_admin', methods=['GET', 'POST'])
def login_admin():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        admin = User.query.filter_by(username=username, is_admin=True).first()
        
        if admin and admin.password == password:
            login_user(admin)
            return redirect(url_for('leaderboard'))
    
    return render_template('login_admin.html')



@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        # Vérifier l'authentification de l'utilisateur
        user = User.query.filter_by(username=username).first()
        if user and user.password == password:
            login_user(user)
            return redirect(url_for('leaderboard'))
    
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/')
def leaderboard():
    # Récupérer les équipes triées par points décroissants
    teams = Team.query.order_by(Team.points.desc()).all()
    
    # Calculer la position dans le classement en gérant les égalités de points
    position = 1
    current_points = None
    
    for team in teams:
        if team.points != current_points:
            team.position = position
            current_points = team.points
        position += 1
        
    db.session.commit()
    return render_template('leaderboard.html', teams=teams)


@app.route('/update_points', methods=['GET', 'POST'])
@login_required
def update_points():
    if not current_user.is_admin:
        return "Accès refusé. Seul l'administrateur peut effectuer cette action."
    
    if request.method == 'POST':
        team_id = int(request.form['team'])
        new_points = int(request.form['points'])
        
        # Mettre à jour les points de l'équipe sélectionnée dans la base de données
        team = Team.query.get(team_id)
        if team:
            team.points = new_points
            db.session.commit()
        
        return redirect(url_for('leaderboard'))
    
    team_id = int(request.args.get('team_id'))  # Récupérer l'ID de l'équipe depuis les paramètres de l'URL
    team = Team.query.get(team_id)
    
    return render_template('update_points.html', team=team, team_points=team.points, teams=Team.query.all())



@app.route('/create_team', methods=['GET', 'POST'])
@login_required
def create_team():
    if not current_user.is_admin:
        return "Accès refusé. Seul l'administrateur peut effectuer cette action."
    
    if request.method == 'POST':
        new_team = Team(name=request.form['name'], points=int(request.form['points']), image=request.form['image'])
        db.session.add(new_team)
        db.session.commit()
        return redirect(url_for('leaderboard'))
    
    return render_template('create_team.html')


@app.route('/edit_team/<int:team_id>', methods=['GET', 'POST'])
@login_required
def edit_team(team_id):
    team = Team.query.get(team_id)
    if not team:
        return "Team not found"
    
    if not current_user.is_admin:
        return "Access denied. Only administrators can perform this action."
    
    if request.method == 'POST':
        team.name = request.form['name']
        team.points = int(request.form['points'])
        # Mettez à jour d'autres attributs d'équipe ici si nécessaire
        db.session.commit()
        return redirect(url_for('leaderboard'))
    
    return render_template('edit_team.html', team=team)


if __name__ == '__main__':
    app.run(debug=True)
